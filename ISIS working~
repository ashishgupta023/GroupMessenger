package edu.buffalo.cse.cse486586.groupmessenger2;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.telephony.TelephonyManager;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.ContentHandler;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;

/**
 * GroupMessengerActivity is the main Activity for the assignment.
 *
 * @author stevko
 *
 */
public class GroupMessengerActivity extends Activity {

    static final String TAG = GroupMessengerActivity.class.getSimpleName();
    static final String REMOTE_PORT0 = "11108";
    static final String REMOTE_PORT1 = "11112";
    static final String REMOTE_PORT2 = "11116";
    static final String REMOTE_PORT3 = "11120";
    static final String REMOTE_PORT4 = "11124";
    static final int SERVER_PORT = 10000;
    String[] remotePorts = {REMOTE_PORT0, REMOTE_PORT1 , REMOTE_PORT2};
    //String[] remotePorts = {REMOTE_PORT0, REMOTE_PORT1,REMOTE_PORT2 ,REMOTE_PORT3,REMOTE_PORT4};
    ArrayList<String> remotePortsList = new ArrayList<String>();

    static String myPort;
    String failedNode = null;
    int message_counter = 0;

    //For FIFO Ordering
    int sentMessagesCount = 0; //messages sent to the group
    HashMap<String,Integer> deliveredMessagesCount = new HashMap<String,Integer>(); // messages delivered from group
    HashMap<String,HashMap<Integer,MessageObject>> fifoHoldBackQueue = new HashMap<String,HashMap<Integer,MessageObject>>();
    // if messages arrive out of order, hold them until previous messages arrive


    //for ISIS
    //  priority queue ordererd on increasing sequence number
    PriorityQueue<MessageObject> isisHoldBackQueue = new PriorityQueue<MessageObject>(); // for storing messages based on priority until delivered
    LinkedList<MessageObject> isisDeliveryQueue = new LinkedList<MessageObject>(); // delivery queue
    //to keep track of whether all AVDs have responded
    HashMap<String,HashMap<String,MessageObject>> allProposedSequences = new HashMap<String,HashMap<String,MessageObject>>();

    HashMap<String,HashMap<String,Long>> expectingProposals = new HashMap<String,HashMap<String,Long>>();
    HashMap<String,HashMap<String,Long>> expectingFinals = new HashMap<String,HashMap<String,Long>>();


    int largestAgreedSequenceNumber  = 0;
    int largestProposedSequenceNumber = 0 ;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_group_messenger);
        //Set the delivered messages count to zeros
        deliveredMessagesCount.put(REMOTE_PORT0 , 0);
        deliveredMessagesCount.put(REMOTE_PORT1 , 0);
        deliveredMessagesCount.put(REMOTE_PORT2 , 0);
        deliveredMessagesCount.put(REMOTE_PORT3 , 0);
        deliveredMessagesCount.put(REMOTE_PORT4 , 0);
        for (int i = 0 ; i < remotePorts.length ; i++)
        {
            remotePortsList.add(remotePorts[i]);
        }
        /*
         * TODO: Use the TextView to display your messages. Though there is no grading component
         * on how you display the messages, if you implement it, it'll make your debugging easier.
         */
        TextView tv = (TextView) findViewById(R.id.textView1);
        tv.setMovementMethod(new ScrollingMovementMethod());

        TelephonyManager tel = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);
        String portStr = tel.getLine1Number().substring(tel.getLine1Number().length() - 4);
        myPort = String.valueOf((Integer.parseInt(portStr) * 2));

        try {

            ServerSocket serverSocket = new ServerSocket(SERVER_PORT);
            new ServerTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, serverSocket);
        } catch (IOException e) {

            Log.e(TAG, "Can't create a ServerSocket");
            return;
        }



        /*
         * Registers OnPTestClickListener for "button1" in the layout, which is the "PTest" button.
         * OnPTestClickListener demonstrates how to access a ContentProvider.
         */
        findViewById(R.id.button1).setOnClickListener(
                new OnPTestClickListener(tv, getContentResolver()));

        /*
         * TODO: You need to register and implement an OnClickListener for the "Send" button.
         * In your implementation you need to get the message from the input box (EditText)
         * and send it to other AVDs.
         */
        final EditText editText = (EditText) findViewById(R.id.editText1);

        findViewById(R.id.button4).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                String msg = editText.getText().toString()+"\n";
                editText.setText("");
                new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, msg, myPort);

            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.activity_group_messenger, menu);
        return true;
    }


    private class ServerTask extends AsyncTask<ServerSocket, String, Void> {


        @Override
        protected Void doInBackground(ServerSocket... sockets) {
            int message_counter = 0;
            while(true) {

                ServerSocket serverSocket = sockets[0];
                try {
                  serverSocket.setSoTimeout(5000);
                    checkFailure();
                    Socket clientSocket = serverSocket.accept();
                    checkFailure();



                    ObjectInputStream ois = new ObjectInputStream(clientSocket.getInputStream());
                    MessageObject mo = (MessageObject) ois.readObject();
                    ois.close();

                    // If a new message arrives
                    if (!mo.isProposalMessage() && !mo.isAgreedMessage()) {


                        largestProposedSequenceNumber = max(largestProposedSequenceNumber, largestAgreedSequenceNumber) + 1;
                        mo.setSequenceNumber(largestProposedSequenceNumber);

                        //Store messages in a priority queue  ordered with the smallest sequence number at the front
                        isisHoldBackQueue.add(mo);

                        Log.v("Received", "New: Message from" + mo.getPort() + "-" + mo.getText() + ":ID:" + mo.getmId());

                        new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, mo.getText(), myPort, Integer.toString(mo.getSequenceNumber()), mo.getPort(), mo.getmId());

                    }
                    else if(mo.isProposalMessage() && !mo.isAgreedMessage()) // a sequence proposal for a message arrives
                    {

                       /* if(expectingProposals.containsKey(mo.getPort()))
                        {
                            if(expectingProposals.get(mo.getPort()).containsKey(mo.getmId()))
                            {
                                expectingProposals.get(mo.getPort()).remove(mo.getmId());
                            }
                            if(expectingProposals.get(mo.getPort()).size() == 0)
                            {
                                expectingProposals.remove(mo.getPort());
                            }
                        }*/
                        Log.v("Received", "Proposal : Message from" + mo.getPort() + "-" + mo.getText() + ":ID:" + mo.getmId());

                        addtoProposedMessagesList(mo); // Add the proposal for this message
                        if (allProposedSequences.get(mo.getmId()).size() == remotePortsList.size()) {
                            // All AVDs have replied with the proposed sequence number
                            MessageObject agreedSequenceNumber = getLargestProposedSequence(mo.getmId());
                            new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, mo.getText(), myPort, Integer.toString(agreedSequenceNumber.getSequenceNumber()), mo.getPort(), mo.getmId(), "agreed", agreedSequenceNumber.getProcessId());

                        }

                    }
                    else if(mo.isAgreedMessage()) {

                        /*if(expectingFinals.containsKey(mo.getPort()))
                        {
                            if(expectingFinals.get(mo.getPort()).containsKey(mo.getmId()))
                            {
                                expectingFinals.get(mo.getPort()).remove(mo.getmId());
                            }
                            if(expectingFinals.get(mo.getPort()).size() == 0)
                            {
                                expectingFinals.remove(mo.getPort());
                            }
                        }*/

                        largestAgreedSequenceNumber = max(largestAgreedSequenceNumber, mo.getSequenceNumber());
                        Log.v("Received", "Agreed : Sequence: " + mo.getSequenceNumber() + " from" + mo.getPort() + "-" + mo.getText() + ":ID:" + mo.getmId());

                        // Reorder the priority Queue
                        PriorityQueue<MessageObject> isisHoldBackQueueReordered = new PriorityQueue<MessageObject>();
                        while (isisHoldBackQueue.size() != 0) {
                            MessageObject moPQ = isisHoldBackQueue.poll();

                            if (moPQ.getmId().equals(mo.getmId())) {
                                moPQ.setSequenceNumber(mo.getSequenceNumber());
                                moPQ.setDeliverable(true);
                            }
                            isisHoldBackQueueReordered.add(moPQ);
                        }
                        isisHoldBackQueue.clear();
                        isisHoldBackQueue = isisHoldBackQueueReordered;

                        //Check if the head of the queue is deliverable, move to delivery queue
                        while (isisHoldBackQueue.size() != 0 && isisHoldBackQueue.peek().isDeliverable()) {
                            MessageObject toBeDelivered = isisHoldBackQueue.poll();
                            isisDeliveryQueue.add(toBeDelivered);
                            Log.v("ISIS", "Moving for Delivery: " + toBeDelivered.getText());

                        }
                        //Deliver all messages in the delivery queue
                        while (isisDeliveryQueue.size() != 0) {
                            MessageObject temp = new MessageObject();
                            temp = isisDeliveryQueue.remove();
                            // When the messages are coming out of the delivery queue , keep track of FIFO ordering
                            if (temp.getFifoSequenceNumber() == deliveredMessagesCount.get(temp.getPort()) + 1) {
                                deliveredMessagesCount.put(temp.getPort(), temp.getFifoSequenceNumber());
                                Log.v("Delivering", temp.getText() + " ISIS Holdback Queue :"  + isisHoldBackQueue.size()
                                        + " ISIS Delivery Queue: " + isisDeliveryQueue.size()   );
                                publishProgress(temp.getText());
                                //check if there are any messages in the fifo hold back queue ready for delivery
                                if(fifoHoldBackQueue.containsKey(temp.getPort()))
                                {
                                    if (fifoHoldBackQueue.get(temp.getPort()).containsKey(temp.getFifoSequenceNumber() + 1))
                                    {
                                        int nextCount = temp.getFifoSequenceNumber() + 1;
                                        deliveredMessagesCount.put(temp.getPort(), nextCount);

                                        publishProgress(fifoHoldBackQueue.get(temp.getPort()).remove(nextCount).getText());
                                        Log.v("Delivering", temp.getText() + " ISIS Holdback Queue :"  + isisHoldBackQueue.size()
                                                + " ISIS Delivery Queue: " + isisDeliveryQueue.size() +
                                                " FIFO Hold Back Queue" + fifoHoldBackQueue.size()   );
                                    }
                                }

                                // if not FIFO ordered, hold back in a FIFO queue until interveing messages arrive
                            } else if (temp.getFifoSequenceNumber() > deliveredMessagesCount.get(temp.getPort()) + 1) {
                                HashMap<Integer,MessageObject> fhb = new HashMap<Integer,MessageObject>();
                                fhb.put(temp.getFifoSequenceNumber(), temp);
                                fifoHoldBackQueue.put(temp.getPort() , fhb);
                            }


                        }
                    }

                }
                catch(SocketTimeoutException ex)
                {
                    Log.e("SOCKETTIMEOUT", myPort);
                    checkFailure();
                }
                /*catch (InterruptedIOException ex)
                {
                    Log.e(TAG, "Interrupted Exception while receiving message");

                }
                */catch (IOException ex)
                {
                    Log.e(TAG, "IO Exception while receiving message");
                    Log.e(TAG, ex.getMessage());
                }
                catch (Exception ex)
                {
                    Log.e(TAG, "Exception while receiving message");
                    Log.e(TAG, ex.getMessage());
                }

            }

        }

        protected void onProgressUpdate(String...strings) {

            ContentResolver cr = getContentResolver();
            Uri iUri = buildUri("content", "edu.buffalo.cse.cse486586.groupmessenger2.provider");
            ContentValues cv = new ContentValues();
            cv.put("key", Integer.toString(message_counter));
            cv.put("value", strings[0]);
            cr.insert(iUri, cv);
            message_counter = message_counter + 1;
            Log.v("Screen" , "Delivering Message : " + strings[0] + " Port:" + myPort);
            String strReceived = strings[0].trim();
            TextView textView= (TextView) findViewById(R.id.textView1);
            textView.append(strReceived + "\t\n");



        }
    }

    public String checkFailure()
    {
        Log.v("FAILUREDETECT" , "-----Trying----");

        if(failedNode != null)
        {
            if (expectingProposals.size() != 0) {
                for(String host : expectingProposals.keySet())
                {
                    if(!host.equals(myPort))
                    {
                        HashMap<String,Long> expectedMsgs = expectingProposals.get(host);
                        for(String mid : expectedMsgs.keySet())
                        {
                           if(System.currentTimeMillis() - expectedMsgs.get(mid) > 5000)
                           {
                               failedNode = host;
                               Log.e("FAILUREDETECT" , "Failed:" + failedNode);
                               return failedNode;
                           }
                        }

                    }
                }
            }

            if (expectingFinals.size() != 0) {
                for(String host : expectingFinals.keySet())
                {
                    if(!host.equals(myPort))
                    {
                        HashMap<String,Long> expectedMsgs = expectingFinals.get(host);
                        for(String mid : expectedMsgs.keySet())
                        {
                            if(System.currentTimeMillis() - expectedMsgs.get(mid) > 5000)
                            {
                                failedNode = host;
                                Log.e("FAILUREDETECT" , "Failed:" + failedNode);
                                return failedNode;
                            }
                        }

                    }
                }
            }
        }
        return null;
    }

    public void handleFailure(String port)
    {
        Log.v("FAILURE" , "Failed Node" + port );
        PriorityQueue<MessageObject> tempIsisHoldBackQueue = new PriorityQueue<MessageObject>();

        while(isisHoldBackQueue.size()!=0)
        {
            MessageObject obj = isisHoldBackQueue.poll();
            if(!obj.getPort().equals(port) ) {
                tempIsisHoldBackQueue.add(obj);
            }
        }
        isisHoldBackQueue.clear();
        isisHoldBackQueue = tempIsisHoldBackQueue;

        for(String key : allProposedSequences.keySet())
        {
            if(allProposedSequences.get(key).keySet().contains(port))
            {
                allProposedSequences.get(key).remove(port);
            }
            if(allProposedSequences.get(key).size() == 0)
            {
                allProposedSequences.remove(key);
            }
        }

        ArrayList<Integer> toBeRemoved = new ArrayList<Integer>();
        for(int i = 0 ; i < isisDeliveryQueue.size() ; i++)
        {
            MessageObject obj = isisDeliveryQueue.get(i);
            if(obj.getPort().equals(port))
            {
                toBeRemoved.add(i);
            }
        }
        for(int i = 0 ;i < toBeRemoved.size() ; i++)
        {
            isisDeliveryQueue.remove(toBeRemoved.get(i));
        }


        /*for(int i = 0 ; i < remotePortsList.size() ; i++)
        {
            if(remotePortsList.contains(port))
            {
                remotePortsList.remove(port);
            }
        }*/


    }
    public void addtoProposedMessagesList(MessageObject mo)
    {
        //New Proposal message from a AVD
        if(!allProposedSequences.containsKey(mo.getmId()))
        {
            HashMap<String, MessageObject> currProposedMessage = new HashMap<String, MessageObject>();
            currProposedMessage.put(mo.getPort(), mo);
            allProposedSequences.put(mo.getmId(), currProposedMessage);
        }
        else
        {
            //Proposal from other AVDs, AVD's are identified by their processID's
            HashMap<String, MessageObject> proposedMessages = allProposedSequences.get(mo.getmId());
            if(!proposedMessages.containsKey(mo.getPort()))
            {
                proposedMessages.put(mo.getPort(),mo);
                allProposedSequences.put(mo.getmId(),proposedMessages);
            }
        }
    }

    public MessageObject getLargestProposedSequence(String mId)
    {
        // Need to implement an ISIS tie breaker if process propose the same sequence number
        //Proposal from all AVDs
        MessageObject mo = new MessageObject();
        mo.setSequenceNumber(0);
        HashMap<String, MessageObject> proposedMessages = allProposedSequences.get(mId);
        for(String avd : proposedMessages.keySet())
        {
            if(proposedMessages.get(avd).getSequenceNumber() > mo.getSequenceNumber())
            {
                mo.setSequenceNumber( proposedMessages.get(avd).getSequenceNumber());
                mo.setPort(proposedMessages.get(avd).getPort());
            }
        }

        // If the proposed sequence number is same, pick the max process ID
        for(String avd : proposedMessages.keySet())
        {
            if(proposedMessages.get(avd).getSequenceNumber() == mo.getSequenceNumber())
            {
                if(proposedMessages.get(avd).getPort() != mo.getPort())
                {
                    if(Integer.parseInt(proposedMessages.get(avd).getPort()) > Integer.parseInt(mo.getPort()))
                    {
                        mo.setSequenceNumber(proposedMessages.get(avd).getSequenceNumber());
                        mo.setPort(proposedMessages.get(avd).getPort());
                    }
                }
            }
        }

        return mo;
    }

    public int max(int largestProposedSequenceNumber,int largestAgreedSequenceNumber)
    {
        if(largestProposedSequenceNumber >= largestAgreedSequenceNumber)
            return largestProposedSequenceNumber;
        else
            return largestAgreedSequenceNumber;
    }
    private Uri buildUri(String scheme, String authority) {
        Uri.Builder uriBuilder = new Uri.Builder();
        uriBuilder.authority(authority);
        uriBuilder.scheme(scheme);
        return uriBuilder.build();
    }

    private class ClientTask extends AsyncTask<String, Void, Void> {

        @Override
        protected Void doInBackground(String... msgs) {

            if(msgs.length > 5 && msgs[5] != null && msgs[5].equals("agreed"))
            {

                MessageObject agreedMessageToSend = new MessageObject();
                agreedMessageToSend.setAgreedMessage(true);
                agreedMessageToSend.setSequenceNumber(Integer.parseInt(msgs[2]));
                agreedMessageToSend.setText(msgs[0]);
                agreedMessageToSend.setPort(msgs[1]);
                agreedMessageToSend.setmId(msgs[4]);
                agreedMessageToSend.setProcessId(msgs[6]);
                for (int i = 0; i < remotePortsList.size(); i++) {
                    try
                    {
                        Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}),
                                Integer.parseInt(remotePortsList.get(i)));
                        //socket.setSoTimeout(500);
                        ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                        oos.writeObject(agreedMessageToSend);
                        Log.v("Sent", "AgreedSequence Multicast : Message to " + remotePortsList.get(i) + " from " + msgs[1] + "-" + msgs[0] + ":ID:" + msgs[4]);
                        oos.close();
                        socket.close();
                    }
                    /*catch(SocketTimeoutException ex)
                    {
                        //failedNode = remotePortsList.get(i);
                        //Log.v("FAILURE" , "Failed Node" + failedNode );
                        Log.e(TAG, "ClientTask SocketTimeOutException");

                    }*/
                    catch (UnknownHostException e)
                    {
                        Log.e(TAG, "ClientTask UnknownHostException");
                    }
                    catch (IOException e)
                    {
                        //  failedNode = remotePortsList.get(i);
                        //  Log.v("FAILURE" , "Failed Node" + failedNode );
                        Log.e(TAG, "ClientTask socket IOException" );
                        Log.e(TAG, e.getMessage());
                    }
                }

            }
            else if(msgs.length >2 && msgs[2] != null && msgs[2].length() != 0)
            {

                boolean isProposed = true;
                MessageObject propMsgtoSend = new MessageObject();
                propMsgtoSend.setProposalMessage(true);
                propMsgtoSend.setSequenceNumber(Integer.parseInt(msgs[2]));
                propMsgtoSend.setText(msgs[0]);
                propMsgtoSend.setPort(msgs[1]);
                propMsgtoSend.setProcessId(msgs[1]);
                propMsgtoSend.setmId(msgs[4]); //messageID

                try
                {
                    Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}),
                            Integer.parseInt(msgs[3]));
                    //expectingFinals.put(msgs[3],msgIDs);

                    if(expectingFinals.containsKey(msgs[3]))
                    {
                        HashMap<String,Long> allMsgs = expectingFinals.get(msgs[3]);
                        allMsgs.put(propMsgtoSend.getmId(),System.currentTimeMillis());
                        expectingFinals.put(msgs[3],allMsgs);
                    }
                    else
                    {
                        HashMap<String,Long> msgSendTimes = new HashMap<String,Long>();
                        msgSendTimes.put(propMsgtoSend.getmId(),System.currentTimeMillis() );
                        expectingFinals.put(msgs[3],msgSendTimes);
                    }

                    //socket.setSoTimeout(500);
                    ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                    oos.writeObject(propMsgtoSend);
                    Log.v("Sent", "Proposal : Message to " + msgs[3] + " from " + msgs[1] + "-" + msgs[0] + ":ID:" + msgs[4]);
                    oos.close();
                    socket.close();
                }
                /*catch(SocketTimeoutException ex)
                {
                    //failedNode = msgs[3];
                    //Log.v("FAILURE" , "Failed Node" + failedNode );
                    Log.e(TAG, "ClientTask SocketTimeOutException");

                }*/
                catch (UnknownHostException e)
                {
                    Log.e(TAG, "ClientTask UnknownHostException");
                }
                catch (IOException e)
                {
                    //ailedNode = msgs[3];
                    //Log.v("FAILURE" , "Failed Node" + failedNode );
                    Log.e(TAG, "ClientTask socket IOException" );
                    Log.e(TAG, e.getMessage());
                }


            }
            else if (msgs.length == 2) {

                //FIFO - increment the sent message counter
                sentMessagesCount = sentMessagesCount + 1;

                for (int i = 0; i < remotePortsList.size(); i++)
                {

                    //String msgToSend = msgs[0];
                    //Total Ordering - Multicast with message and unique id
                    MessageObject msgtoSend = new MessageObject();
                    msgtoSend.setText(msgs[0]);
                    msgtoSend.setPort(msgs[1]); // Stores message sender
                    msgtoSend.setProcessId(msgs[1]);
                    msgtoSend.setFifoSequenceNumber(sentMessagesCount);
                    msgtoSend.setmId(msgs[1].toString() + "." + Integer.toString(sentMessagesCount)); //messageID

                    try {
                        Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}),
                                Integer.parseInt(remotePortsList.get(i)));
                        //socket.setSoTimeout(500);
                        if(expectingProposals.containsKey(remotePortsList.get(i)))
                        {
                            HashMap<String,Long> allMsgs = expectingProposals.get(remotePortsList.get(i));
                            allMsgs.put(msgtoSend.getmId(),System.currentTimeMillis());
                            expectingProposals.put(remotePortsList.get(i),allMsgs);
                        }
                        else
                        {
                            HashMap<String,Long> msgSendTimes = new HashMap<String,Long>();
                            msgSendTimes.put(msgtoSend.getmId(),System.currentTimeMillis() );
                            expectingProposals.put(remotePortsList.get(i),msgSendTimes);
                        }
                        ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                        oos.writeObject(msgtoSend);
                        Log.v("Sent", "Multicast : Message to " + remotePortsList.get(i) + " from " + msgs[1] + "-" + msgs[0] + ":ID:" + msgtoSend.getmId());
                        oos.close();
                        //PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
                        //out.println(msgToSend);
                        socket.close();
                    }
                    /*catch(SocketTimeoutException ex)
                    {

                        Log.e(TAG, "ClientTask SocketTimeOutException");

                    }*/
                    catch (UnknownHostException e) {
                        Log.e(TAG, "ClientTask UnknownHostException");
                    }
                    catch (IOException e) {


                        Log.e(TAG, "ClientTask socket IOException");
                        Log.e(TAG, e.getMessage());
                    }
                }

            }
            return null;
        }


    }
}
